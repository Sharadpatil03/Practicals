#include <bits/stdc++.h>
using namespace std;

struct Item {
    int profit, weight;
};

// Comparison function to sort items by profit-to-weight ratio in descending order
bool compare(Item a, Item b) {
    return (double)a.profit / a.weight > (double)b.profit / b.weight;
}

double fractionalKnapsack(int W, vector<Item>& items) {
    // Sort items by descending profit-to-weight ratio
    sort(items.begin(), items.end(), compare);

    double maxProfit = 0.0;

    for (const auto& item : items) {
        if (W == 0) break; // Knapsack is full

        if (item.weight <= W) {
            // Take the whole item
            maxProfit += item.profit;
            W -= item.weight;
        } else {
            // Take the fraction of the remaining item
            maxProfit += item.profit * ((double)W / item.weight);
            W = 0;
        }
    }

    return maxProfit;
}

int main() {
    int W = 50;  // Maximum weight capacity of the knapsack

    // List of 5 items with profit and weight
    vector<Item> items = {
        {60, 10},
        {100, 20},
        {120, 30},
        {80, 40},
        {50, 25}
    };

    double maxProfit = fractionalKnapsack(W, items);
    cout << "Maximum profit (using Fractional Knapsack) = " << maxProfit << endl;

    return 0;
}
