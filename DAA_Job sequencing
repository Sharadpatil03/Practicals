#include <bits/stdc++.h>
using namespace std;

struct Job {
    int id;       // Job ID
    int profit;   // Profit if job is completed
    int deadline; // Deadline by which the job should be completed
};

// Comparison function to sort jobs by profit in descending order
bool compare(Job a, Job b) {
    return a.profit > b.profit;
}

pair<int, int> jobSequencing(vector<Job>& jobs, int maxDeadline) {
    // Sort jobs by descending profit
    sort(jobs.begin(), jobs.end(), compare);

    vector<int> schedule(maxDeadline + 1, -1); // Track filled slots
    int maxProfit = 0;
    int jobCount = 0;

    // Iterate over each job
    for (const auto& job : jobs) {
        // Try to schedule the job at the latest possible slot within its deadline
        for (int j = min(maxDeadline, job.deadline); j > 0; j--) {
            if (schedule[j] == -1) { // If slot is empty
                schedule[j] = job.id; // Assign job to this slot
                maxProfit += job.profit; // Add profit
                jobCount++; // Increment job count
                break;
            }
        }
    }

    return {jobCount, maxProfit};
}

int main() {
    // List of 5 jobs with job ID, profit, and deadline
    vector<Job> jobs = {
        {1, 100, 2},
        {2, 19, 1},
        {3, 27, 2},
        {4, 25, 1},
        {5, 15, 3}
    };

    int maxDeadline = 3; // Maximum deadline for scheduling

    auto [jobCount, maxProfit] = jobSequencing(jobs, maxDeadline);
    cout << "Maximum jobs done = " << jobCount << endl;
    cout << "Maximum profit = " << maxProfit << endl;

    return 0;
}
